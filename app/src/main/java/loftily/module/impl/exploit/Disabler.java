package loftily.module.impl.exploit;

import loftily.event.impl.packet.PacketReceiveEvent;
import loftily.event.impl.packet.PacketSendEvent;
import loftily.module.Module;
import loftily.module.ModuleCategory;
import loftily.module.ModuleInfo;
import loftily.utils.client.ClassUtils;
import loftily.utils.client.PacketUtils;
import loftily.value.impl.MultiBooleanValue;
import net.lenni0451.lambdaevents.EventHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketConfirmTransaction;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketExplosion;

import java.util.LinkedList;
import java.util.Queue;

@ModuleInfo(name = "Disabler",category = ModuleCategory.OTHER)
public class Disabler extends Module {

    private final MultiBooleanValue clientPackets = new MultiBooleanValue("CPackets");
    private final MultiBooleanValue serverPackets = new MultiBooleanValue("SPackets");

    private final MultiBooleanValue packetBuffer = new MultiBooleanValue("PacketBuffer")
            .add("C03Buffer",false)
            .add("C0FBuffer",false)
            .add("S32Buffer",false)
            .add("S12Buffer",false)
            .add("S27Buffer",false);

    public final static Queue<Packet<?>> clientBuffer = new LinkedList<>();
    public final static Queue<Packet<?>> serverBuffer = new LinkedList<>();


    {
        ClassUtils.resolvePackage("net.minecraft.network.play.client").forEach(
                clazz -> {
                    String name = clazz.getSimpleName();
                    if (!name.startsWith("S")) return;

                    clientPackets.add(clazz.getSimpleName(), false);
                }
        );
        ClassUtils.resolvePackage("net.minecraft.network.play.server").forEach(
                clazz -> {
                    String name = clazz.getSimpleName();
                    if (!name.startsWith("S")) return;
                    serverPackets.add(clazz.getSimpleName(), false);
                }
        );
    }

    @Override
    public void onDisable() {
        for (Packet<?> packet : clientBuffer) {
            PacketUtils.sendPacket(packet,false);
        }
        for (Packet<?> packet : serverBuffer) {
            PacketUtils.receivePacket(packet,false);
        }
    }

    @EventHandler
    public void onCPacket(PacketSendEvent event) {
        Packet<?> packet = event.getPacket();
        clientPackets.getValue().forEach(
                (equalPacket,value)->{
                    if(packet.getClass().getSimpleName().equals(equalPacket) && value) {
                        event.setCancelled(true);
                    }
                }
        );
        if((packet instanceof CPacketPlayer && packetBuffer.getValue("C03Buffer"))
        || (packet instanceof CPacketConfirmTransaction && packetBuffer.getValue("C0FBuffer"))){
            event.setCancelled(true);
            clientBuffer.add(packet);
        }
    }
    @EventHandler
    public void onSPacket(PacketReceiveEvent event) {
        Packet<?> packet = event.getPacket();
        serverPackets.getValue().forEach(
                (equalPacket,value)->{
                    if(packet.getClass().getSimpleName().equals(equalPacket) && value) {
                        event.setCancelled(true);
                    }
                }
        );
        if((packet instanceof SPacketConfirmTransaction && packetBuffer.getValue("S32Buffer"))
                || (packet instanceof SPacketEntityVelocity && packetBuffer.getValue("S12Buffer")
        || packet instanceof SPacketExplosion && packetBuffer.getValue("S27Buffer"))){
            event.setCancelled(true);
            serverBuffer.add(packet);
        }
    }
}
