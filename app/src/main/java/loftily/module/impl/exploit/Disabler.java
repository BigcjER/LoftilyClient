package loftily.module.impl.exploit;

import loftily.event.impl.client.MoveInputEvent;
import loftily.event.impl.packet.PacketReceiveEvent;
import loftily.event.impl.packet.PacketSendEvent;
import loftily.event.impl.player.RotationEvent;
import loftily.event.impl.player.motion.MotionEvent;
import loftily.event.impl.render.Render2DEvent;
import loftily.event.impl.world.WorldLoadEvent;
import loftily.handlers.impl.player.RotationHandler;
import loftily.module.Module;
import loftily.module.ModuleCategory;
import loftily.module.ModuleInfo;
import loftily.utils.ServerUtils;
import loftily.utils.client.ClassUtils;
import loftily.utils.client.MessageUtils;
import loftily.utils.client.PacketUtils;
import loftily.utils.math.RandomUtils;
import loftily.utils.math.Rotation;
import loftily.utils.player.PlayerUtils;
import loftily.utils.render.Colors;
import loftily.utils.render.RenderUtils;
import loftily.utils.timer.DelayTimer;
import loftily.value.impl.BooleanValue;
import loftily.value.impl.MultiBooleanValue;
import loftily.value.impl.NumberValue;
import net.lenni0451.lambdaevents.EventHandler;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.SPacketConfirmTransaction;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketExplosion;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.EnumHand;

import java.util.LinkedList;
import java.util.Queue;

@ModuleInfo(name = "Disabler", category = ModuleCategory.EXPLOIT)
public class Disabler extends Module {
    
    private final MultiBooleanValue antiCheat = new MultiBooleanValue("BypassMode");

    private final NumberValue disablerTicks = new NumberValue("Ticks", 100.0, 85.0, 150.0, 5.0).setVisible(() -> antiCheat.getValue("WatchDogMovement"));
    private final NumberValue activationDelay = new NumberValue("ActivationDelay(seconds)", 0.0, 0.0, 4.0, 0.5).setVisible(() -> antiCheat.getValue("WatchDogMovement"));
    
    private final MultiBooleanValue clientPackets = new MultiBooleanValue("CPackets");
    private final MultiBooleanValue serverPackets = new MultiBooleanValue("SPackets");
    
    private final MultiBooleanValue packetBuffer = new MultiBooleanValue("Buffer");
    private final BooleanValue bufferAfterFlagging = new BooleanValue("BufferAfterFlagging", false);
    private final NumberValue flagTimes = new NumberValue("FlagTimes", 1, 1, 5).setVisible(bufferAfterFlagging::getValue);
    
    public final static Queue<Packet<?>> clientBuffer = new LinkedList<>();
    public final static Queue<Packet<?>> serverBuffer = new LinkedList<>();
    
    private final DelayTimer fallFlyTimer = new DelayTimer();
    private int receivedFlagTimes = 0;
    private Rotation lastRotation = new Rotation(0, 0);
    
    {
        ClassUtils.resolvePackage("net.minecraft.network.play.client").forEach(
                clazz -> {
                    String name = clazz.getSimpleName();
                    if (!name.startsWith("C")) return;
                    
                    clientPackets.add(clazz.getSimpleName(), false);
                }
        );
        ClassUtils.resolvePackage("net.minecraft.network.play.server").forEach(
                clazz -> {
                    String name = clazz.getSimpleName();
                    if (!name.startsWith("S")) return;
                    serverPackets.add(clazz.getSimpleName(), false);
                }
        );
        
        antiCheat.add("NoGround", false)
                .add("SpoofGround", false)
                .add("InvalidKeepAlive", false)
                .add("VoidTP", false)
                .add("FallFlyingPacket", false)
                .add("MainHandPacket", false)
                .add("OffHandPacket", false)
                .add("VehicleMove", false)
                .add("C06=>C04", false)
                .add("NoRotation", false)
                .add("InputPacket", false)
                .add("RepeatS32",false)
                .add("NotMoving",false)
                .add("WatchDogMovement", false)
        ;
        
        packetBuffer.add("C03Buffer", false)
                .add("C00Buffer", false)
                .add("C0FBuffer", false)
                .add("S32Buffer", false)
                .add("S12Buffer", false)
                .add("S27Buffer", false);
        
    }

    private final BooleanValue notRotating = new BooleanValue("NotMoving-NotRotating", false).setVisible(()->antiCheat.getValue("NotMoving"));
    private final NumberValue xzOffset = new NumberValue("XZOffset", 1024, -2048, 2048, 16).setVisible(() -> antiCheat.getValue("VoidTP"));
    private final NumberValue yOffset = new NumberValue("YOffset", 1024, -2048, 2048, 16).setVisible(() -> antiCheat.getValue("VoidTP"));
    private final NumberValue teleportDelay = new NumberValue("TPDelay", 1, 1, 20, 1).setVisible(() -> antiCheat.getValue("VoidTP"));
    private final NumberValue repeatS32Amount = new NumberValue("RepeatS32Amount",5,1,20).setVisible(() -> antiCheat.getValue("RepeatS32"));


    // Hypixel Movement
    int tickCounter = 0;
    boolean waitingForGround = false;
    boolean applyingMotion = false;
    int stateTickCounter = 0;
    boolean warningDisplayed = false;
    int sprintToggleTick = 0;
    boolean shouldRun = false;
    long lobbyTime = 0L;
    long finished = 0L;
    long activationDelayMillis;
    private final float barWidth = 60.0F;
    private float filledWidth;
    private float barX;
    private float barY;
    private boolean shouldRender;
    private double firstY;
    private boolean reset;
    private float savedPitch;
    private boolean worldJoin;
    private int wDelay;
    public boolean disablerLoaded;
    public boolean running;


    @Override
    public void onEnable() {
        lastRotation = RotationHandler.getRotation();
        if (!this.disablerLoaded) {
            this.resetState();
        }
    }

    @Override
    public void onDisable() {
        if (!clientBuffer.isEmpty()) {
            for (Packet<?> packet : clientBuffer) {
                PacketUtils.sendPacket(packet, false);
            }
        }
        if (!serverBuffer.isEmpty()) {
            for (Packet<?> packet : serverBuffer) {
                PacketUtils.receivePacket(packet, false);
            }
        }
        clientBuffer.clear();
        serverBuffer.clear();
        fallFlyTimer.reset();
        receivedFlagTimes = 0;

        this.shouldRun = false;
        this.running = false;
    }
    
    @EventHandler(priority = -100)
    public void onRotation(RotationEvent event) {
        if (antiCheat.getValue("NoRotation")) {
            event.setRotation(lastRotation);
        }
    }
    
    @EventHandler
    public void onMotion(MotionEvent event) {
        antiCheat.getValue().forEach(
                (mode, value) -> {
                    if (value) {
                        switch (mode) {
                            case "WatchDogMovement":
                                if (event.isPost()) break;
/*                                if (this.resetDisabler.isToggled()) {
                                    Utils.modulePrint("&7[&dR&7] &cdisabler resetting...");
                                    this.resetState();
                                    this.disablerLoaded = false;
                                    this.resetDisabler.disable();
                                }*/

                                if (ServerUtils.getLobbyStatus() != 1 && ServerUtils.hypixelStatus() == 1 && !ServerUtils.isReplay()) {
                                    long now = System.currentTimeMillis();
                                    if (this.finished != 0L && mc.player.onGround && now - this.finished > 4000L) {
                                        MessageUtils.clientMessageWithWaterMark("disabler enabled");
                                        this.finished = 0L;
                                        this.filledWidth = 0.0F;
                                        this.disablerLoaded = true;
                                    }

                                    if (this.shouldRun) {
                                        if (now - this.lobbyTime >= this.activationDelayMillis) {
                                            this.running = true;
                                            RotationHandler.setClientRotation(new Rotation(0.0F, this.savedPitch), 1, 1, RotationHandler.MoveFix.NONE);
                                            if (this.waitingForGround) {
                                                if (mc.player.onGround) {
                                                    mc.player.motionY = 0.42F;
                                                    this.waitingForGround = false;
                                                    this.worldJoin = false;
                                                }
                                            } else {
                                                if (mc.player.offGroundTicks >= 10 || this.worldJoin && ++this.wDelay >= 3) {
                                                    if (!this.applyingMotion) {
                                                        this.applyingMotion = true;
                                                        this.firstY = mc.player.posY;
                                                    }

                                                    if (this.tickCounter < this.disablerTicks.getValue()) {
                                                        this.shouldRender = true;
                                                        mc.player.motionX = 0.0;
                                                        mc.player.motionY = 0.0;
                                                        mc.player.motionZ = 0.0;
                                                        if (mc.player.posY != this.firstY) {
                                                            if (!this.reset) {
                                                                this.resetState();
                                                                this.activationDelayMillis = 2000L;
                                                                this.reset = true;
                                                                MessageUtils.clientMessageWithWaterMark("disabler reset, wait 2s");
                                                            } else {
                                                                this.shouldRun = false;
                                                                this.applyingMotion = false;
                                                                this.running = false;
                                                                MessageUtils.clientMessageWithWaterMark("failed to reset disabler, re-enable to try again");
                                                            }
                                                        }

                                                        if (mc.player.ticksExisted % 2 == 0) {
                                                            event.setZ(event.getZ() + 0.075);
                                                            event.setX(event.getX() + 0.075);
                                                        }

                                                        this.tickCounter++;
                                                    } else if (!this.warningDisplayed) {
                                                        this.warningDisplayed = true;
                                                        this.finished = now;
                                                        this.shouldRender = false;
                                                        this.shouldRun = false;
                                                        this.applyingMotion = false;
                                                        this.running = false;
                                                    }
                                                }

                                                this.filledWidth = (float)(this.barWidth * this.tickCounter / this.disablerTicks.getValue());
                                                ScaledResolution scaledResolution = new ScaledResolution(mc);
                                                int[] disp = new int[]{scaledResolution.getScaledWidth(), scaledResolution.getScaledHeight(), scaledResolution.getScaleFactor()};
                                                this.barX = disp[0] / 2F - this.barWidth / 2.0F;
                                                this.barY = disp[1] / 2F + 12;
                                            }
                                        }
                                    }
                                }
                                break;
                            case "InputPacket":
                                if (event.isPost()) {
                                    PacketUtils.sendPacket(new CPacketInput(mc.player.moveStrafing, 0.98f, mc.player.isJumping, mc.player.isSneaking()));
                                }
                                break;
                            case "VehicleMove":
                                PacketUtils.sendPacket(new CPacketVehicleMove(mc.player));
                                break;
                            case "OffHandPacket":
                                PacketUtils.sendPacket(new CPacketPlayerTryUseItem(EnumHand.OFF_HAND));
                                break;
                            case "MainHandPacket":
                                PacketUtils.sendPacket(new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));
                                break;
                            case "FallFlyingPacket":
                                if (fallFlyTimer.hasTimeElapsed(350)) {
                                    PacketUtils.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_FALL_FLYING));
                                    fallFlyTimer.reset();
                                }
                                break;
                            case "SpoofGround":
                                event.setOnGround(true);
                                break;
                            case "NoGround":
                                event.setOnGround(false);
                                break;
                            case "InvalidKeepAlive":
                                if (event.isPre()) {
                                    PacketUtils.sendPacket(new CPacketKeepAlive(RandomUtils.randomInt(-999999, 999999)), false);
                                }
                                break;
                            case "VoidTP":
                                if (mc.player.ticksExisted % teleportDelay.getValue() == 0) {
                                    event.setX(event.getX() + xzOffset.getValue());
                                    event.setY(event.getY() - yOffset.getValue());
                                    event.setZ(event.getZ() + xzOffset.getValue());
                                }
                                break;
                        }
                    }
                }
        );
    }
    
    @EventHandler
    public void onWorld(WorldLoadEvent event) {
        clientBuffer.clear();
        serverBuffer.clear();
        fallFlyTimer.reset();

        this.resetState();
    }
    
    @EventHandler
    public void onCPacket(PacketSendEvent event) {
        Packet<?> packet = event.getPacket();
        clientPackets.getValue().forEach(
                (equalPacket, value) -> {
                    if (packet.getClass().getSimpleName().equals(equalPacket) && value) {
                        event.setCancelled(true);
                    }
                }
        );
        if ((packet instanceof CPacketPlayer && packetBuffer.getValue("C03Buffer"))
                || (packet instanceof CPacketConfirmTransaction && packetBuffer.getValue("C0FBuffer"))
                || (packet instanceof CPacketKeepAlive && packetBuffer.getValue("C00Buffer"))) {
            if (!bufferAfterFlagging.getValue() || receivedFlagTimes >= flagTimes.getValue()) {
                event.setCancelled(true);
                clientBuffer.add(packet);
            }
        }
        if (antiCheat.getValue("C06=>C04")) {
            if (packet instanceof CPacketPlayer.PositionRotation) {
                event.setCancelled(true);
                PacketUtils.sendPacket(new CPacketPlayer.Position(((CPacketPlayer.PositionRotation) packet).x,
                        ((CPacketPlayer.PositionRotation) packet).y,
                        ((CPacketPlayer.PositionRotation) packet).z,
                        ((CPacketPlayer.PositionRotation) packet).onGround));
            }
        }
        if(antiCheat.getValue("NotMoving")){
            if(packet instanceof CPacketPlayer){
                if(!((CPacketPlayer) packet).getMoving() && (!notRotating.getValue() || !((CPacketPlayer) packet).getRotating())){
                    event.setCancelled(true);
                }
            }
        }
    }
    
    @EventHandler
    public void onSPacket(PacketReceiveEvent event) {
        Packet<?> packet = event.getPacket();
        if (packet instanceof SPacketPlayerPosLook) {
            receivedFlagTimes += 1;
        }
        serverPackets.getValue().forEach(
                (equalPacket, value) -> {
                    if (packet.getClass().getSimpleName().equals(equalPacket) && value) {
                        event.setCancelled(true);
                    }
                }
        );
        if ((packet instanceof SPacketConfirmTransaction && packetBuffer.getValue("S32Buffer"))
                || (packet instanceof SPacketEntityVelocity && packetBuffer.getValue("S12Buffer")
                || packet instanceof SPacketExplosion && packetBuffer.getValue("S27Buffer"))) {
            if (!bufferAfterFlagging.getValue() || receivedFlagTimes >= flagTimes.getValue()) {
                event.setCancelled(true);
                serverBuffer.add(packet);
            }
        }
        if(antiCheat.getValue("RepeatS32")){
            if(packet instanceof SPacketConfirmTransaction) {
                for (int i = 0; i < repeatS32Amount.getValue(); i++) {
                    PacketUtils.receivePacket(packet, false);
                }
            }
        }
    }

    // Hypixel Movement

    @EventHandler
    public void onMoveInput(MoveInputEvent e) {
        if (this.running && !ServerUtils.isReplay() && !ServerUtils.spectatorCheck()) {
            e.setForward(0.0F);
            e.setStrafe(0.0F);
            mc.player.movementInput.jump = false;
        }
    }

    @EventHandler
    public void onRenderTick(Render2DEvent ev) {
        if (PlayerUtils.nullCheck()) {
            if (mc.currentScreen == null && this.shouldRun && this.shouldRender) {
                float barHeight = 4.0F;
                RenderUtils.drawRoundedRect(this.barX, this.barY, this.barWidth, barHeight, 3.0F, Colors.BackGround.color);
                RenderUtils.drawRoundedRect(this.barX, this.barY, this.filledWidth, barHeight, 3.0F, Colors.Active.color);
            }
        }
    }

    private void resetState() {
        this.savedPitch = mc.player.rotationPitch;
        this.shouldRun = true;
        this.tickCounter = 0;
        this.applyingMotion = false;
        this.waitingForGround = true;
        this.stateTickCounter = 0;
        this.warningDisplayed = false;
        this.running = false;
        this.sprintToggleTick = 0;
        this.lobbyTime = System.currentTimeMillis();
        this.finished = 0L;
        this.shouldRender = false;
        this.reset = false;
        this.worldJoin = false;
        this.activationDelayMillis = (long)(this.activationDelay.getValue() * 1000.0);
    }
}
