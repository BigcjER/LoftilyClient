package loftily.module.impl.exploit.disablers;

import loftily.Client;
import loftily.event.impl.packet.PacketReceiveEvent;
import loftily.event.impl.world.UpdateEvent;
import loftily.module.impl.exploit.Disabler;
import loftily.module.impl.player.Scaffold;
import loftily.utils.client.PacketUtils;
import loftily.value.impl.BooleanValue;
import loftily.value.impl.mode.Mode;
import net.lenni0451.lambdaevents.EventHandler;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.network.Packet;
import net.minecraft.network.login.server.SPacketEncryptionRequest;
import net.minecraft.network.play.server.*;
import net.minecraft.network.status.server.SPacketPong;
import net.minecraft.network.status.server.SPacketServerInfo;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public class GrimDisabler extends Mode<Disabler> {
    public static GrimDisabler INSTANCE;

    public GrimDisabler() {
        super("Grim");
        INSTANCE = this;
    }

    private final BooleanValue post = new BooleanValue("GrimPost",false);
    private final BooleanValue scaffold = new BooleanValue("GrimPost-NoScaffold",false).setVisible(post::getValue);

    private boolean lastResult = false;
    public static List<Packet<?>> storedPackets = new CopyOnWriteArrayList<>();

    @EventHandler
    public void onUpdate(UpdateEvent event) {
        if (!getGrimPost()) {
            processPackets();
        }
    }

    public boolean getGrimPost() {
        if(mc.player == null || mc.world == null || !post.getValue())return false;
        AtomicBoolean has = new AtomicBoolean(false);
        getParent().getValues().forEach(
                (v)->{
                    if(v.getName().equals("Grim")){
                        if(v.getValue() instanceof BooleanValue){
                            if(((BooleanValue)v).getValue()){
                                has.set(true);
                            }
                        }
                    }
                }
        );
        boolean result = getParent().isToggled() && has.get() &&
                mc.player != null &&
                mc.player.isEntityAlive() &&
                mc.player.ticksExisted >= 10 &&
                !(mc.currentScreen instanceof GuiDownloadTerrain)&&
                (!Client.INSTANCE.getModuleManager().get(Scaffold.class).isToggled() || !scaffold.getValue());
        if (lastResult && !result) {
            lastResult = false;
            mc.addScheduledTask(this::processPackets);
        }
        return lastResult == result;
    }

    public void processPackets() {
        if (!storedPackets.isEmpty()) {
            for (Packet<?> packet : storedPackets) {
                PacketReceiveEvent event = new PacketReceiveEvent(packet, PacketReceiveEvent.Type.VANILLA);
                Client.INSTANCE.getEventManager().call(event);
                if (event.isCancelled()) continue;
                PacketUtils.receivePacket(packet,false);
            }
            storedPackets.clear();
        }
    }

    public boolean grimPostDelay(Packet<?> packet) {
        if (mc.player == null) {
            return false;
        }
        if (mc.currentScreen instanceof GuiDownloadTerrain) {
            return false;
        }
        if (packet instanceof SPacketServerInfo) {
            return false;
        }
        if (packet instanceof SPacketEncryptionRequest) {
            return false;
        }
        if (packet instanceof SPacketPlayerListItem) {
            return false;
        }
        if (packet instanceof SPacketDisconnect) {
            return false;
        }
        if (packet instanceof SPacketChunkData) {
            return false;
        }
        if (packet instanceof SPacketPong) {
            return false;
        }
        if (packet instanceof SPacketWorldBorder) {
            return false;
        }
        if (packet instanceof SPacketJoinGame) {
            return false;
        }
        if (packet instanceof SPacketEntityHeadLook) {
            return false;
        }
        if (packet instanceof SPacketTeams) {
            return false;
        }
        if (packet instanceof SPacketChat) {
            return false;
        }
        if (packet instanceof SPacketSetSlot) {
            return false;
        }
        if (packet instanceof SPacketEntityMetadata) {
            return false;
        }
        if (packet instanceof SPacketEntityProperties) {
            return false;
        }
        if (packet instanceof SPacketUpdateTileEntity) {
            return false;
        }
        if (packet instanceof SPacketTimeUpdate) {
            return false;
        }
        if (packet instanceof SPacketPlayerListHeaderFooter) {
            return false;
        }
        if (packet instanceof SPacketEntityVelocity) {
            final SPacketEntityVelocity sPacketEntityVelocity = (SPacketEntityVelocity)packet;
            return sPacketEntityVelocity.getEntityID() == mc.player.getEntityId();
        }
        return packet instanceof SPacketExplosion || packet instanceof SPacketConfirmTransaction || packet instanceof SPacketPlayerPosLook || packet instanceof SPacketEntityTeleport || packet instanceof SPacketEntityStatus || packet instanceof SPacketEntityEquipment || packet instanceof SPacketBlockChange || packet instanceof SPacketMultiBlockChange || packet instanceof SPacketDestroyEntities || packet instanceof SPacketKeepAlive || packet instanceof SPacketUpdateHealth || packet instanceof SPacketEntity || packet instanceof SPacketSpawnMob || packet instanceof SPacketOpenWindow || packet instanceof SPacketWindowItems || packet instanceof SPacketCustomPayload || packet instanceof SPacketCloseWindow;
    }
}
